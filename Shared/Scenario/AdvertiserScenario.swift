//
//  AdvertiserScenario.swift
//  Enrollment
//
//  Created by YuCheng on 2021/5/20.
//

import Foundation
import Flynn
import UIKit
import MultipeerConnectivity

class AdvertiserScenario: Actor {

    private var displayName = UIDevice.current.name
    private let serviceType = "Visitor-Endrollment"
    private var host: PeerHost?
    private var advertiser: PeerAdvertiser?
    
    private func _beAdvertiser(peerName: String) {
        if !peerName.isEmpty {
            displayName = peerName
        }
        host = PeerHost(sender: self, peerName: displayName, serviceType: serviceType, encryption: .none)
        advertiser = PeerAdvertiser(sender: self, peerName: displayName, serviceType: serviceType)
    }
    private func _beStartAdvertising() {
        advertiser?.beStartAdvertising()
    }
    private func _beStopAdvertising() {
        advertiser?.beStopAdvertising()
    }
    private func _beGetDataSource(_complete:@escaping () -> Void) {
        
    }
}
extension AdvertiserScenario: PeerHostProtocol,AdvertiserProtocol {
    // MARK: - PeerHostProtocol
    private func _beSession(peer peerID: MCPeerID, didChange state: MCSessionState) {
    }
    private func _beSession(didReceive data: Data, fromPeer peerID: MCPeerID) {
    }
    
    private func _beSession(didReceive stream: InputStream, withName streamName: String, fromPeer peerID: MCPeerID) {
    }
    
    private func _beSession(didStartReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, with progress: Progress) {
    }
    
    private func _beSession(didFinishReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, at localURL: URL?, withError error: Error?) {
    }
    // MARK: - AdvertiserProtocol
    private func _beAdvertiser(didReceiveInvitationFromPeer peerID: MCPeerID, withContext context: Data?) {
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension AdvertiserScenario {

    @discardableResult
    public func beAdvertiser(peerName: String) -> Self {
        unsafeSend { self._beAdvertiser(peerName: peerName) }
        return self
    }
    @discardableResult
    public func beStartAdvertising() -> Self {
        unsafeSend(_beStartAdvertising)
        return self
    }
    @discardableResult
    public func beStopAdvertising() -> Self {
        unsafeSend(_beStopAdvertising)
        return self
    }
    @discardableResult
    public func beGetDataSource(_complete: @escaping () -> Void) -> Self {
        unsafeSend { self._beGetDataSource(_complete: _complete) }
        return self
    }
    @discardableResult
    public func beSession(peer peerID: MCPeerID, didChange state: MCSessionState) -> Self {
        unsafeSend { self._beSession(peer: peerID, didChange: state) }
        return self
    }
    @discardableResult
    public func beSession(didReceive data: Data, fromPeer peerID: MCPeerID) -> Self {
        unsafeSend { self._beSession(didReceive: data, fromPeer: peerID) }
        return self
    }
    @discardableResult
    public func beSession(didReceive stream: InputStream, withName streamName: String, fromPeer peerID: MCPeerID) -> Self {
        unsafeSend { self._beSession(didReceive: stream, withName: streamName, fromPeer: peerID) }
        return self
    }
    @discardableResult
    public func beSession(didStartReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, with progress: Progress) -> Self {
        unsafeSend { self._beSession(didStartReceivingResourceWithName: resourceName, fromPeer: peerID, with: progress) }
        return self
    }
    @discardableResult
    public func beSession(didFinishReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, at localURL: URL?, withError error: Error?) -> Self {
        unsafeSend { self._beSession(didFinishReceivingResourceWithName: resourceName, fromPeer: peerID, at: localURL, withError: error) }
        return self
    }
    @discardableResult
    public func beAdvertiser(didReceiveInvitationFromPeer peerID: MCPeerID, withContext context: Data?) -> Self {
        unsafeSend { self._beAdvertiser(didReceiveInvitationFromPeer: peerID, withContext: context) }
        return self
    }

}
