//
//  AdvertiserScenario.swift
//  Enrollment
//
//  Created by YuCheng on 2021/5/20.
//

import Foundation
import Flynn
import ReSwift
import UIKit
import MultipeerConnectivity

class AdvertiserScenario: Actor {

    private var displayName = UIDevice.current.name
    private let serviceType = "Visitor-Endrollment"
    private var host: PeerHost?
    private var advertiser: PeerAdvertiser?
    private var stateChanged: ((SceneState) -> Void)?
    private lazy var visitor = VisitorInfo()
    
    override init() {
        super.init()
        guard let storedJson = UserDefaults.standard.object(forKey: "visitor_info") as? String else { return }
        visitor = storedJson.toEntity(to: VisitorInfo.self) ?? VisitorInfo()
    }
    private func _beSubscribeRedux(_ complete:@escaping (SceneState) -> Void) {
        stateChanged = complete
        appStore.subscribe(self) {
            $0.select {
                $0.sceneState
            }
        }
    }
    private func _beUnSubscribeRedux() {
        appStore.unsubscribe(self)
        stateChanged = nil
    }
    private func _beAdvertiser(peerName: String) {
        if !peerName.isEmpty {
            displayName = peerName
        }
        host = PeerHost(sender: self, peerName: displayName, serviceType: serviceType, encryption: .none)
        advertiser = PeerAdvertiser(sender: self, peerName: displayName, serviceType: serviceType)
    }
    private func _beStartAdvertising() {
        advertiser?.beStartAdvertising()
    }
    private func _beStopAdvertising() {
        advertiser?.beStopAdvertising()
    }
    private func _beGetDataSource(
        _ complete:@escaping ([ListInputItem]) -> Void) {
        let source = [
            ListInputItem(
                title: "姓名：",
                placeholder: "請輸入您的姓名",
                keyboardType: .namePhonePad,
                content: visitor.name
            ),
            ListInputItem(
                title: "電話：",
                placeholder: "請輸入您電話",
                keyboardType: .phonePad,
                content: visitor.tel
            ),
            ListInputItem(
                title: "身分證字號：",
                placeholder: "請輸入您的身份證字號",
                keyboardType: .asciiCapable,
                content: visitor.identityNo
            )
        ]
        DispatchQueue.main.async {
            complete(source)
        }
    }
    private func _beStoreVisitorInfo(index: Int,value: String) {
        switch index {
        case 0:
            visitor.name = value
        case 1:
            visitor.tel = value
        case 2:
            visitor.identityNo = value
        default: break
        }
    }
    private func _beSaveVisitor() {
        let json = visitor.toJson()
        UserDefaults.standard.setValue(json, forKey: "visitor_info")
    }
}
extension AdvertiserScenario:PeerHostProtocol,AdvertiserProtocol {
    // MARK: - PeerHostProtocol
    private func _beSession(peer peerID: MCPeerID, didChange state: MCSessionState) {
    }
    private func _beSession(didReceive data: Data, fromPeer peerID: MCPeerID) {
    }
    
    private func _beSession(didReceive stream: InputStream, withName streamName: String, fromPeer peerID: MCPeerID) {
    }
    
    private func _beSession(didStartReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, with progress: Progress) {
    }
    
    private func _beSession(didFinishReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, at localURL: URL?, withError error: Error?) {
    }
    // MARK: - AdvertiserProtocol
    private func _beAdvertiser(
        didReceiveInvitationFromPeer peerID: MCPeerID, withContext context: Data?) {
    }
}
extension AdvertiserScenario: StoreSubscriber {
    func newState(state: SceneState) {
        if stateChanged != nil {
            DispatchQueue.main.async { [self] in
                stateChanged!(state)
            }
        }
    }
}
// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension AdvertiserScenario {

    @discardableResult
    public func beSubscribeRedux(_ complete: @escaping (SceneState) -> Void) -> Self {
        unsafeSend { self._beSubscribeRedux(complete) }
        return self
    }
    @discardableResult
    public func beUnSubscribeRedux() -> Self {
        unsafeSend(_beUnSubscribeRedux)
        return self
    }
    @discardableResult
    public func beAdvertiser(peerName: String) -> Self {
        unsafeSend { self._beAdvertiser(peerName: peerName) }
        return self
    }
    @discardableResult
    public func beStartAdvertising() -> Self {
        unsafeSend(_beStartAdvertising)
        return self
    }
    @discardableResult
    public func beStopAdvertising() -> Self {
        unsafeSend(_beStopAdvertising)
        return self
    }
    @discardableResult
    public func beGetDataSource(_ complete: @escaping ([ListInputItem]) -> Void) -> Self {
        unsafeSend { self._beGetDataSource(complete) }
        return self
    }
    @discardableResult
    public func beStoreVisitorInfo(index: Int, value: String) -> Self {
        unsafeSend { self._beStoreVisitorInfo(index: index, value: value) }
        return self
    }
    @discardableResult
    public func beSaveVisitor() -> Self {
        unsafeSend(_beSaveVisitor)
        return self
    }
    @discardableResult
    public func beSession(peer peerID: MCPeerID, didChange state: MCSessionState) -> Self {
        unsafeSend { self._beSession(peer: peerID, didChange: state) }
        return self
    }
    @discardableResult
    public func beSession(didReceive data: Data, fromPeer peerID: MCPeerID) -> Self {
        unsafeSend { self._beSession(didReceive: data, fromPeer: peerID) }
        return self
    }
    @discardableResult
    public func beSession(didReceive stream: InputStream, withName streamName: String, fromPeer peerID: MCPeerID) -> Self {
        unsafeSend { self._beSession(didReceive: stream, withName: streamName, fromPeer: peerID) }
        return self
    }
    @discardableResult
    public func beSession(didStartReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, with progress: Progress) -> Self {
        unsafeSend { self._beSession(didStartReceivingResourceWithName: resourceName, fromPeer: peerID, with: progress) }
        return self
    }
    @discardableResult
    public func beSession(didFinishReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, at localURL: URL?, withError error: Error?) -> Self {
        unsafeSend { self._beSession(didFinishReceivingResourceWithName: resourceName, fromPeer: peerID, at: localURL, withError: error) }
        return self
    }
    @discardableResult
    public func beAdvertiser(didReceiveInvitationFromPeer peerID: MCPeerID, withContext context: Data?) -> Self {
        unsafeSend { self._beAdvertiser(didReceiveInvitationFromPeer: peerID, withContext: context) }
        return self
    }

}
