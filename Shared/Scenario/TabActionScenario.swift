//
//  TabActionScenario.swift
//  Enrollment
//
//  Created by YuCheng on 2021/5/22.
//

import Foundation
import Flynn
import ReSwift

class TabActionScenario: Actor {
    private var newStateEvent: ((SceneState) -> Void)?
    private func _beSubscribeRedux(
        _ complete:@escaping (SceneState) -> Void) {
        newStateEvent = complete
        appStore.subscribe(self) {
            $0.select {
                $0.sceneState
            }
        }
    }
    private func _beUnSubscribeRedux() {
        appStore.unsubscribe(self)
        newStateEvent = nil
    }
}
extension TabActionScenario: StoreSubscriber {
    func newState(state: SceneState) {
        unsafeSend { [self] in
            switch state.currentAction {
            case let action as OpenFormURLAction:
                Courier().beApplyExpress(sender: self, recipient: "WebViewScenario", content: action.urlString) { _ in
                    if newStateEvent != nil {
                        DispatchQueue.main.async {
                            newStateEvent!(state)
                        }
                    }
                }
            default: break
            }
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension TabActionScenario {

    @discardableResult
    public func beSubscribeRedux(_ complete: @escaping (SceneState) -> Void) -> Self {
        unsafeSend { self._beSubscribeRedux(complete) }
        return self
    }
    @discardableResult
    public func beUnSubscribeRedux() -> Self {
        unsafeSend(_beUnSubscribeRedux)
        return self
    }

}
