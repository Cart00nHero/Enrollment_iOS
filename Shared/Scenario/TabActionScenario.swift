//
//  TabActionScenario.swift
//  Enrollment
//
//  Created by YuCheng on 2021/5/22.
//

import Foundation
import Flynn
import ReSwift
import SwiftUI

class TabActionScenario: Actor {
    private let redux = ReduxActor()
    private func _beSubscribeRedux(
        _ complete:@escaping (SceneState) -> Void) {
        redux.subscribeRedux { [self] state in
            unsafeSend {
                switch state.currentAction {
                case let action as OpenFormURLAction:
                    Courier().beApplyExpress(sender: self, recipient: "WebViewScenario", content: action.urlString) { _ in
                        DispatchQueue.main.async {
                            complete(state)
                        }
                    }
                default:
                    DispatchQueue.main.async {
                        complete(state)
                    }
                }
            }
        }
    }
    private func _beUnSubscribeRedux() {
        redux.unsubscribe()
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension TabActionScenario {

    @discardableResult
    public func beSubscribeRedux(_ complete: @escaping (SceneState) -> Void) -> Self {
        unsafeSend { self._beSubscribeRedux(complete) }
        return self
    }
    @discardableResult
    public func beUnSubscribeRedux() -> Self {
        unsafeSend(_beUnSubscribeRedux)
        return self
    }

}
