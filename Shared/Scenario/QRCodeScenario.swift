//
//  QRCodeScenario.swift
//  Enrollment
//
//  Created by YuCheng on 2021/5/27.
//

import Foundation
import Flynn
import UIKit

class QRCodeScenario: Actor {
    
    private lazy var visitedUnit: VisitedUnit = VisitedUnit()
    
    private func _beCurrentRole(_ complete:@escaping(String) -> Void) {
        let role: String =
            UserDefaults.standard.object(forKey: "role_of_user") as? String ?? ""
        DispatchQueue.main.async {
            complete(role)
        }
    }
    
    private func _beCollectParcel() {
        Courier().beClaim(recipient: self) { [self] pSet in
            for parcel in pSet {
                guard let parcel = parcel as? Parcel<VisitedUnit> else { return }
                visitedUnit = parcel.content
            }
        }
    }
    private func _bePrepareImageMessage(image:UIImage) {
        var selectedImd: UIImage = image
        var isResizing = false
        if image.size.width > 200.0 || image.size.height > 200.0 {
            isResizing = true
            ToolMan().beResizeImage(
                sender: self, image: image,
                newSize: CGSize(width: 200.0,height: 200.0)) { newImage in
                selectedImd = newImage
                isResizing = false
            }
        }
        while isResizing {
            // Waiting
            RunLoop.current.run(until: Date())
        }
        ToolMan().beBase64ImageString(
            sender: self, image: selectedImd) { [self] imageString in
            visitedUnit.qr_image = imageString
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension QRCodeScenario {

    @discardableResult
    public func beCollectParcel() -> Self {
        unsafeSend(_beCollectParcel)
        return self
    }
    @discardableResult
    public func bePrepareImageMessage(image: UIImage) -> Self {
        unsafeSend { self._bePrepareImageMessage(image: image) }
        return self
    }

}
