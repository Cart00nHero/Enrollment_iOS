//
//  BrowserScenario.swift
//  Enrollment
//
//  Created by YuCheng on 2021/5/20.
//

import Foundation
import Flynn
import UIKit
import MultipeerConnectivity

class BrowserScenario: Actor {
    
    private let displayName = UIDevice.current.name
    private let serviceType = "Visitor-Endrollment"
    private var host: PeerHost?
    private var browser: PeerBrowser?
    private var invite_list: [MCPeerID] = []
    
    private func _beBrowser() {
        host = PeerHost(sender: self, peerName: displayName, serviceType: serviceType, encryption: .none)
        browser = PeerBrowser(
            sender: self, peerName: displayName, serviceType: serviceType)
    }
    private func _beGetInviteList(
        _ complete:@escaping([MCPeerID]) -> Void) {
    }
}
extension BrowserScenario: PeerHostProtocol,BrowserProtocol {
    // MARK: - PeerHostProtocol
    private func _beSession(peer peerID: MCPeerID, didChange state: MCSessionState) {
    }
    
    private func _beSession(didReceive data: Data, fromPeer peerID: MCPeerID) {
    }
    
    private func _beSession(didReceive stream: InputStream, withName streamName: String, fromPeer peerID: MCPeerID) {
    }
    
    private func _beSession(didStartReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, with progress: Progress) {
    }
    
    private func _beSession(didFinishReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, at localURL: URL?, withError error: Error?) {
    }
    // MARK: - BrowserProtocol
    private func _beBrowser(foundPeer peerID: MCPeerID, withDiscoveryInfo info: [String : String]?) {
        if !invite_list.contains(peerID) {
            invite_list.append(peerID)
        }
    }
    
    private func _beBrowser(lostPeer peerID: MCPeerID) {
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension BrowserScenario {

    @discardableResult
    public func beBrowser() -> Self {
        unsafeSend(_beBrowser)
        return self
    }
    @discardableResult
    public func beGetInviteList(_ complete: @escaping([MCPeerID]) -> Void) -> Self {
        unsafeSend { self._beGetInviteList(complete) }
        return self
    }
    @discardableResult
    public func beSession(peer peerID: MCPeerID, didChange state: MCSessionState) -> Self {
        unsafeSend { self._beSession(peer: peerID, didChange: state) }
        return self
    }
    @discardableResult
    public func beSession(didReceive data: Data, fromPeer peerID: MCPeerID) -> Self {
        unsafeSend { self._beSession(didReceive: data, fromPeer: peerID) }
        return self
    }
    @discardableResult
    public func beSession(didReceive stream: InputStream, withName streamName: String, fromPeer peerID: MCPeerID) -> Self {
        unsafeSend { self._beSession(didReceive: stream, withName: streamName, fromPeer: peerID) }
        return self
    }
    @discardableResult
    public func beSession(didStartReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, with progress: Progress) -> Self {
        unsafeSend { self._beSession(didStartReceivingResourceWithName: resourceName, fromPeer: peerID, with: progress) }
        return self
    }
    @discardableResult
    public func beSession(didFinishReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, at localURL: URL?, withError error: Error?) -> Self {
        unsafeSend { self._beSession(didFinishReceivingResourceWithName: resourceName, fromPeer: peerID, at: localURL, withError: error) }
        return self
    }
    @discardableResult
    public func beBrowser(foundPeer peerID: MCPeerID, withDiscoveryInfo info: [String : String]?) -> Self {
        unsafeSend { self._beBrowser(foundPeer: peerID, withDiscoveryInfo: info) }
        return self
    }
    @discardableResult
    public func beBrowser(lostPeer peerID: MCPeerID) -> Self {
        unsafeSend { self._beBrowser(lostPeer: peerID) }
        return self
    }

}
