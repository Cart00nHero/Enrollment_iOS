//
//  DataConverter.swift
//  iListenOnWatch Extension
//
//  Created by 林祐正 on 2021/5/3.
//  Copyright © 2021 SmartFun. All rights reserved.
//

import Foundation
import Flynn
import UIKit

class DataConverter: Actor {
    private func _beConvertBetween<T1: Codable,T2: Codable>(
        sender: Actor,from: T1, to type: T2.Type,
        _ complete: @escaping (T2) -> Void) {
        do {
            let jsonData = try JSONEncoder().encode(from)
            let jsonString = String(data: jsonData, encoding: .utf8)
            let result = jsonString?.toEntity(to: type)
            if result != nil {
                sender.unsafeSend {
                    complete(result!)
                }
            }
        } catch {
            print(error.localizedDescription)
        }
    }
    private func _beEntityToJson<T: Codable>(
        sender:Actor,from entity: T,
        _ complete: @escaping (String) -> Void){
        do {
            let jsonData = try JSONEncoder().encode(entity)
            let jsonString = String(data: jsonData, encoding: .utf8) ?? ""
            sender.unsafeSend {
                complete(jsonString)
            }
        } catch {
            print(error.localizedDescription)
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension DataConverter {

    @discardableResult
    public func beConvertBetween<T1: Codable,T2: Codable>(sender: Actor, from: T1, to type: T2.Type, _ complete: @escaping (T2) -> Void) -> Self {
        unsafeSend { self._beConvertBetween(sender: sender, from: from, to: type, complete) }
        return self
    }
    @discardableResult
    public func beEntityToJson<T: Codable>(sender: Actor, from entity: T, _ complete: @escaping (String) -> Void) -> Self {
        unsafeSend { self._beEntityToJson(sender: sender, from: entity, complete) }
        return self
    }
    
}
