//
//  PeerAdvertiser.swift
//  ActorDeveloper
//
//  Created by YuCheng on 2021/5/20.
//

import Foundation
import Flynn
import MultipeerConnectivity

protocol AdvertiserProtocol {
    @discardableResult
    func beAdvertiser(didReceiveInvitationFromPeer peerID: MCPeerID, withContext context: Data?) -> Self
}

fileprivate class RoleOfAdvertiser: NSObject {
    
    private var advertiser: MCNearbyServiceAdvertiser!
    var delegate: AdvertiserProtocol?
    
    
    func actRoleOfAdvertiser(name: String,type:String) {
        advertiser = MCNearbyServiceAdvertiser(peer: MCPeerID(displayName: name), discoveryInfo: nil, serviceType: type)
        advertiser.delegate = self
    }
    func startAdvertisingPeer() {
        advertiser.startAdvertisingPeer()
    }
    func stopAdvertisingPeer() {
        advertiser.stopAdvertisingPeer()
    }
    
}

extension RoleOfAdvertiser: MCNearbyServiceAdvertiserDelegate {
    func advertiser(_ advertiser: MCNearbyServiceAdvertiser, didReceiveInvitationFromPeer peerID: MCPeerID, withContext context: Data?, invitationHandler: @escaping (Bool, MCSession?) -> Void) {
        delegate?.beAdvertiser(
            didReceiveInvitationFromPeer: peerID, withContext: context)
    }
    
}

class PeerAdvertiser: Actor {
    
    private let advertiser = RoleOfAdvertiser()
    
    init(sender: AdvertiserProtocol,peerName: String,serviceType:String) {
        advertiser.actRoleOfAdvertiser(name: peerName, type: serviceType)
        advertiser.delegate = sender
    }
    private func _beStartAdvertising() {
        advertiser.startAdvertisingPeer()
    }
    private func _beStopAdvertising() {
        advertiser.stopAdvertisingPeer()
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension PeerAdvertiser {

    @discardableResult
    public func beStartAdvertising() -> Self {
        unsafeSend(_beStartAdvertising)
        return self
    }
    @discardableResult
    public func beStopAdvertising() -> Self {
        unsafeSend(_beStopAdvertising)
        return self
    }

}
