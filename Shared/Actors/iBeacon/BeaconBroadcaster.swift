//
//  BeaconBroadcaster.swift
//  ActorDeveloper
//
//  Created by YuCheng on 2021/5/19.
//

import Foundation
import Flynn
import CoreBluetooth
import CoreLocation

fileprivate class Broadcaster: NSObject {
    
    static let shared = Broadcaster()
    private var beaconRegion: CLBeaconRegion!
    private var beaconPeripheralData: NSDictionary!
    private var peripheraManager: CBPeripheralManager!
    private var beaconIdentifier = ""
    private let beaconUUID: String = UUID().uuidString
    
    func starBroadcast(beaconID: String) {
        let createdUUID = UUID(uuidString: beaconUUID)!
        beaconRegion = CLBeaconRegion(uuid: createdUUID, major: 1, minor: 1, identifier: beaconID)
        beaconPeripheralData = beaconRegion.peripheralData(withMeasuredPower: nil)
        peripheraManager = CBPeripheralManager(delegate: self, queue: nil, options: nil)
    }
    func stopBroadcast() {
        peripheraManager.stopAdvertising()
        peripheraManager = nil
        beaconPeripheralData = nil
        beaconRegion = nil
    }
    func currentUUID() -> String {
        return beaconUUID
    }
}

extension Broadcaster: CBPeripheralManagerDelegate {
    func peripheralManagerDidUpdateState(_ peripheral: CBPeripheralManager) {
        if peripheral.state == .poweredOn {
            guard let peripheralData =
                    beaconPeripheralData as? [String : Any] else { return }
            peripheral.startAdvertising(peripheralData)
        } else if peripheral.state == .poweredOff {
            peripheraManager.stopAdvertising()
        }
    }
}
class BeaconBroadcaster: Actor {
    private let broadcaster = Broadcaster.shared
    
    private func _beStarBroadcast(broadcasterID: String) {
        broadcaster.starBroadcast(beaconID: broadcasterID)
    }
    private func _beStopBroadcast() {
        broadcaster.stopBroadcast()
    }
    private func _beCurrentUUID(
        sender: Actor, _ complete:@escaping((String) -> Void)) {
        let uuid = broadcaster.currentUUID()
        sender.unsafeSend {
            complete(uuid)
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension BeaconBroadcaster {

    @discardableResult
    public func beStarBroadcast(broadcasterID: String) -> Self {
        unsafeSend { self._beStarBroadcast(broadcasterID: broadcasterID) }
        return self
    }
    @discardableResult
    public func beStopBroadcast() -> Self {
        unsafeSend(_beStopBroadcast)
        return self
    }
    @discardableResult
    public func beCurrentUUID(sender: Actor, _ complete: @escaping((String) -> Void)) -> Self {
        unsafeSend { self._beCurrentUUID(sender: sender, complete) }
        return self
    }

}
